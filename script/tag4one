#!/usr/bin/env bash
# vim: setlocal autoindent cindent et ts=4 sw=4 sts=4:
#
# Get the script's directory, resolving symlinks
var_ScriptDir="$( cd "$( dirname "$(readlink -f "${BASH_SOURCE[0]}")" )" &> /dev/null && pwd )"
var_ScriptName=$(basename "$0")
var_ScriptName="${var_ScriptName%.*}"
var_WorkDir=$(pwd)
SECONDS=0

# echo -e "${colorRed}This is red${colorReset}"
colorRed='\e[31m'
colorGreen='\e[32m'
colorYellow='\e[33m'
colorReset='\e[0m'


_Usage=$(cat <<-END
    Sample:
      bash -x script        # Run the script with debug mode enabled.
      bash -n script        # Check for syntax errors without execution.

      script afile

END
)

parse_define() {
  setup   REST help:usage -- "Usage: $var_ScriptName [options] file(s)" ''

  msg -- 'Options:'
  flag  var_VERBOSE    -v --verbose  counter:true init:=0    -- "e.g. -vvv is verbose level 3"
  flag  var_DRYRUN     -n --dryrun                           -- "Dryrun mode"
  flag  var_DEBUG      -d --debug                            -- "Debug mode and list all local variable"
  param var_Action     -a --action   init:="switch"  pattern:"switch | new | pull | push | delete"     -- "Action: *switch|new|pull|push|delete"
  param var_sort       --sort        init:="no"    pattern:"yes | no | foldcase"     -- "sort: *yes|no|foldcase"
  param var_file       -f --filetype init:="log"        -- "vim-filetype"

  disp  VERSION        --version
  disp  :usage         -h --help   -- "$_Usage"
}


# Usage: varNum1=$( int var1 )
int ()
{
    printf '%d' $(expr ${1:-} : '[^0-9]*\([0-9]*\)' 2>/dev/null) || :
}


do_args () {
    ### MUST specify files by Extra arguments
    case "$#" in
        0)
            echo "$_Usage"
            die "Incorrect arguments"
            ;;
        *)
            ;;
    esac

    # So far only process the first file
    var_inFile=$1


    ### Handle arguments
    if [[ -n "$var_DRYRUN" ]]; then
        ( set -o posix ; set ) | grep -e '^var_'
        exit 1
    fi

    if [[ "$var_VERBOSE" -ge 3 ]]; then
        set -x                              ### Print each command before eval
    fi

    if [[ "$var_VERBOSE" -ge 4 ]]; then
        set -v                              ### Print each line of the script before eval
    fi
}


main () {
    do_args "$@"
    do_task "$@"

    cleanup
}


do_task () {
    maketemp

    rg --no-heading --with-filename --line-number --color=never \
        -e '\bwad_accept'     \
        -e '\bwad_app_make'     \
        -e '\bwad_dump_http_request'     \
        -e '\bwad_dump_fwd_http_resp'     \
        -e '\bwad_tcp_port_on_connect'     \
        -e '\bwad_session_context_validate'     \
        -e '\bwad_session_context_learn_session_config'     \
        -e '^feature: '     \
        "$var_inFile" >> "$TEMPFILE"

    rg --no-heading --with-filename --line-number --color=never \
        -e '\bwad_dump_http_request'     \
        -e '\bwad_dump_fwd_http_resp'     \
        -A6 \
        "$var_inFile" >> "$TEMPFILE"

    rg --no-heading --with-filename --line-number --color=never \
        -e '\bwad_session_context_learn_session_config'     \
        -A4 \
        "$var_inFile" >> "$TEMPFILE"


    cat "$TEMPFILE"  | awk -F'[:-]' '{print $1"\t"$2"\t"$0}' | sort -k1 -k2 -n | cut -f3- | uniq > "$TEMPFILE2"
    cat "$TEMPFILE2" | sed "s|$var_inFile||"
}


die () {
    [ "$#" -gt 0 ] && echo -e "${colorRed}  $0: $@  ${colorReset}" >&2
    cleanup
    exit 1
}


maketemp () {
    TEMPFILE=
    if [ -z "$TEMPFILE" ]; then
        TEMPFILE="$(mktemp /tmp/mytmp_XXXXXX)" || die
    fi

    if [ -z "$TEMPFILE2" ]; then
        TEMPFILE2="$(mktemp /tmp/mytmp2_XXXXX)" || die
    fi
}


cleanup() {
    trap - EXIT


    if [[ -n "$var_DEBUG" ]]; then
        echo -e "Tempfile: \n    $TEMPFILE\n    $TEMPFILE2\n"

        duration=$SECONDS
        echo "trap-cleanup(action=$var_Action time=$(($duration / 60))m:$(($duration % 60))s)"
    else
        if [ -n "$TEMPFILE" ]; then
            rm -f "$TEMPFILE" 2> /dev/null
        fi

        if [ -n "$TEMPFILE2" ]; then
            rm -f "$TEMPFILE2" 2> /dev/null
        fi
    fi

    # Backto the original current dir
    cd "$var_WorkDir"
}


# wget -O $HOME/bin/getoptions https://github.com/ko1nksm/getoptions/releases/latest/download/getoptions
trap "cleanup; exit 130" 1 2 3 15
if command -v getoptions &>/dev/null; then
    eval "$(getoptions parse_define) exit 1"
fi

main "$@"

