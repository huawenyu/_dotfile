#!/bin/bash
#
### Migrate this dotfile:
# curl -Lks https://github.com/huawenyu/_dotfile/blob/ubuntu/script/dot-clone | /bin/bash
#
curDir=$(pwd)

#alias dot='/usr/bin/git  --git-dir=$HOME/.dotfile/  --work-tree=$HOME'

echo ".dotfile" >> "$HOME/.gitignore"

if [[ -d "$HOME/.dotfile" ]]; then
	rm -fr $HOME/.dotfile.bak
	mv $HOME/.dotfile $HOME/.dotfile.bak
fi
git clone --bare  https://github.com/huawenyu/_dotfile.git  $HOME/.dotfile

# 
# [ -f "$HOME/.bashrc" ] && echo "alias dot='/usr/bin/git  --git-dir=$HOME/.dotfile/  --work-tree=$HOME'" >> $HOME/.bashrc
# [ -f "$HOME/.zshrc"  ] && echo "alias dot='/usr/bin/git  --git-dir=$HOME/.dotfile/  --work-tree=$HOME'" >> $HOME/.zshrc


backup_dir=$(mktemp $HOME/dotfile-XXXX)
source_dir="$HOME/dotfile-src"
target_dir="$HOME"
if [ -d "$source_dir" ]; then
	echo "Dir '$source_dir' aleady existed, please rm it then clone again, EXIT ...";
	exit 1
fi


echo "---------"
echo "Steps:"
echo "  1.checkout-to '$source_dir'"
echo "  2.copy-to '$target_dir'"
echo "  3.backup-to '$backup_dir'";
echo "---------"

function dot {
	/usr/bin/git --git-dir=$HOME/.dotfile/ --work-tree=$source_dir  $@
}

dot config status.showUntrackedFiles no

mkdir -p "$source_dir"
rm -f    "$backup_dir"
mkdir -p "$backup_dir"

dot checkout
if [ $? = 0 ]; then
	echo "  1.Checkout-to '$source_dir' succ.";
else
	echo "  1.Checkout-to '$source_dir' fail.";
	exit 1
fi;


echo "  2.Copy-to '$target_dir' ...";
# Find and compare files, copying if different or missing
find "$source_dir" -type f | while IFS= read -r src_file; do
	#echo "    file: '$src_file'"

	# Compute the relative path
	rel_path="${src_file#$source_dir/}"
	target_file="$target_dir/$rel_path"
	backup_file="$backup_dir/$rel_path"

	# Symbolic link
	if [[ -L "$target_file" ]]; then
		rm -f "$target_file"
		echo "    Deleted symbolic: $target_file"
	fi

	# Compare and copy if the file differs or doesn't exist
	if [[ ! -f "$target_file" ]] || ! diff -q "$src_file" "$target_file" &>/dev/null; then

	  # Backup the existed file
	  if [[ -f "$target_file" ]]; then
		  mkdir -p "$(dirname "$backup_file")"  # Ensure target subdirectory exists
		  mv "$target_file" "$backup_file"
		  echo "    Backed: $backup_file"
	  fi

	  mkdir -p "$(dirname "$target_file")"  # Ensure target subdirectory exists
	  cp "$src_file" "$target_file"
	  echo "    Copied: $rel_path"
  fi
done

rm -fr "$source_dir"

