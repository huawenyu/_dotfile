#!/usr/bin/env bash
# vim: setlocal autoindent cindent et ts=4 sw=4 sts=4:
#
# Get the script's directory, resolving symlinks
var_ScriptDir="$( cd "$( dirname "$(readlink -f "${BASH_SOURCE[0]}")" )" &> /dev/null && pwd )"
var_ScriptName=$(basename "$0")
var_ScriptName="${var_ScriptName%.*}"
var_WorkDir=$(pwd)

var_FmtIndent=""
var_IsContainer="false"
var_tmpDir='/tmp/tagme'
ClangdFile="compile_commands.json"
SECONDS=0

var_TAG_FILES=( \
    ".tags" \
    ".tagx" \
    ".cscope.files" \
    "tags" \
    "cscope.po.out" \
    "cscope.in.out" \
    "cscope.out" \
    "${ClangdFile}" \
    "${var_tmpDir}" \
)

clean_files=( \
  "${var_tmpDir}" \
)


_Usage=$(cat <<-END
    Generating tags and cscope database...

    Options:
      -a, --action
        pull     # Pull dev-git-dir 'compile_commands.json' from store-server
        push     # Push dev-git-dir 'compile_commands.json' to store-server
        link     # Link from .cache under docker-container
        save
        clean
      -f, --file # One file enforce update it's tag

    Sample:
      tagme

END
)

parse_define() {
  setup   REST help:usage -- "Usage: $var_ScriptName [options] ..." ''

  msg -- 'Options:'
  flag  var_VERBOSE    -v --verbose  counter:true init:=0    -- "e.g. -vvv is verbose level 3"
  flag  var_DRYRUN     -n --dryrun                           -- "Dryrun mode"
  flag  var_DEBUG      -d --debug                            -- "Debug mode and list all local variable"
  param var_Action     -a --action   init:="all"     pattern:"all | pull | push | save | link | clean"     -- "Action: *all|pull|push|save|link|clean"
  param var_TagFile    -t --tag      init:=""        -- "One file enforce update it's tag"
  param var_Scope      -s --scope    init:="all"     pattern:"all | wad"     -- "The files/dirs scope"
  flag  var_Force      -f --force                            -- "Enforce update all tag"

  disp  VERSION        --version
  disp  :usage         -h --help   -- "$_Usage"
}


# Check with: $ ctags --list-kinds=c
#ctags -e --c-kinds=+defgstum -L ${FLIST} > /dev/null 2>&1
#
#v1. CTAGS_FLAG=--extra=+f
#v2. CTAGS_FLAG="--fields=+niazS --extra=+fq --c++-kinds=+px --c-kinds=+px --output-format=e-ctags"
# ctags disable add the function protocol by remove "+p" from c-kinds
#v3. CTAGS_FLAG="--fields=+niazS --extras=+Ffq --c++-kinds=+x --c-kinds=+x --output-format=e-ctags"
# improve c-kinds
CTAGS="ctags"
CTAGS_FLAG=" --fields=+n  --output-format=e-ctags "
CTAGS_FLAG_c="--fields=+niazS --extras=+Ffq --c++-kinds=+x --c-kinds=+defgstumx"
#CTAGS_FLAG_md=' -x --_xformat="%{input}	%{line}	%{name}	%{pattern}" '
CTAGS_FLAG_md=' --fields=FPnN --tag-relative=no --extras=+{subparser}{guest} --language-force=Markdown '
CTAGS_FLAG_script=" --with-list-header=no --machinable=yes"
FLIST=".cscope.files"
FIND_FLAG=( \
    -maxdepth 3 -type f \
    "-not" "-path" './linux-?.*' \
    "-not" "-path" './kernel/*' \
)

die () {
    [ "$#" -gt 0 ] && echo "$0: $@" >&2
    cleanup
    exit 1
}

do_args () {
    # Handle extra args
    case "$#" in
        1)
            var_Action="$1"
            ;;
        0)
            ;;
        *)
            echo "$_Usage"
            die "Incorrect arguments"
            ;;
    esac

    if [[ -f /.dockerenv ]]; then
        var_IsContainer="true"
    fi

    # Change work dir to git-toplevel:
    # - if git-repo, the git-toplevel is the work dir
    # - others, it's current directory
    var_gitTopDir=$(git rev-parse --show-toplevel 2>/dev/null)
    if [[ $? -eq 0 ]]; then
        cd $var_gitTopDir
    else
        var_gitTopDir=${var_WorkDir}
    fi

    var_origDir=
    var_dstDir=${var_gitTopDir}

    if [[ "$var_WorkDir" == "$HOME" ]]; then
        echo "Please enter a workdir, don't run from top-dir directly, e.g. '$HOME'."
        exit 1
    fi

    if [[ -n "$var_DRYRUN" ]]; then
        ( set -o posix ; set ) | grep -e '^var_'
        exit 1
    fi

    if [[ "$var_VERBOSE" -ge 3 ]]; then
        set -x                              ### Print each command before eval
    fi

    if [[ "$var_VERBOSE" -ge 4 ]]; then
        set -v                              ### Print each line of the script before eval
    fi
}


main () {
    if [[ -n "$var_Force" ]]; then
        do_tidyup  "clean"
    fi

    do_args "$@"
    do_task "$@"

    cleanup
}

do_task () {
    #maketemp

    # Dummy-Loop-once
    for i in $(seq 1); do
        if [[ -f "./.tags" && -f "$var_TagFile" ]]; then
            do_update_onefile
            break
        fi

        if [[  "$var_Action" == "clean"  \
            || "$var_Action" == "link" ]]; then
            do_tidyup  "$var_Action"
            break
        fi

        if [[  "$var_Action" != "all" \
            && "$var_Action" != "pull" \
            && "$var_Action" != "push" \
            && "$var_Action" != "save" \
            && "$var_Action" != "md" \
            && "$var_Action" != "wiki" ]]; then
            echo "Can't handle var_Action '$var_Action', Exit!"
            break
        fi


        PrepareFileList
        if [[ $? -ne 0 ]]; then
            echo "PrepareFileList() fail! Exit!"
            break
        fi

        if [[ $var_Action == "push" ]]; then
            SyncClangdJson
            echo "SyncClangdJson() done! Exit!"
            break
        fi


        pidClangd=0
        if [[  "$var_Action" == "all" \
            || "$var_Action" == "pull" \
            || "$var_Action" == "push" ]]; then
            GenClangdJson &
            pidClangd=$!
        fi

        pidTag=0
        if [[  "$var_Action" == "all" \
            || "$var_Action" == "tag" \
            || "$var_Action" == "md" \
            || "$var_Action" == "wiki" ]]; then
            GenTag &
            pidTag=$!
        fi

        pidCscope=0
        if [[  "$var_Action" == "all" \
            || "$var_Action" == "cscope" ]]; then
            GenScope &
            pidCscope=$!
        fi

        # if [[  "$var_Action" == "all" \
        #     || "$var_Action" == "save" ]]; then
        #     ClangdCompileFile
        # fi

        # if [[  "$var_Action" == "all" \
        #     || "$var_Action" == "ccls" ]]; then
        #     GenCcls
        # fi


        # Wait all parallel tasks done
            jobs
            if [ ${pidTag:-0} -gt 0 ];    then wait $pidTag;    fi
            if [ ${pidCscope:-0} -gt 0 ]; then wait $pidCscope; fi
            if [ ${pidClangd:-0} -gt 0 ]; then wait $pidClangd; fi


        do_tidyup  "link"

        # Sanity loop once
        break
    done
}


do_update_onefile () {
    # Special handle: Rebuild the <file> assign by $1
    #   - <file> should be full-path
    if [[ -f "./.tags" && -f "$var_TagFile" ]]; then
        # only rebuild tags when the file belong curr dir
        #if [[ "$1" == "$PWD/"* ]]; then
            pwdlen=${#PWD}
            LC_COLLATE=C   $CTAGS  ${CTAGS_FLAG} -f .tags -a "./${var_TagFile:$pwdlen}"
            #duration=$SECONDS
            #notify-send "Done tags R $(($duration / 60)):$(($duration % 60))."
        #fi
    fi
}

do_tidyup () {
    for tagfile in "${var_TAG_FILES[@]}" ;  do
        if [[ "$1" == "clean" ]]; then
            rm -f "${var_WorkDir}/$tagfile" 2> /dev/null
            rm -f "${var_WorkDir}/.cache/$tagfile" 2> /dev/null
        elif [[ "$1" == "link" ]]; then
            if [[ "$tagfile" == "${var_tmpDir}" ]]; then
                continue
            fi

            if [[ -f "$tagfile" \
                # && "$var_IsContainer" == "true" \
                && -d '.cache' ]]; then
                if [[ -L "$tagfile" ]]; then
                    continue
                fi

                echo "Softlink '${tagfile}' -> '.cache/$tagfile'"

                mv $tagfile  ".cache/$tagfile"
                ln -s  ".cache/$tagfile"  $tagfile
            fi

            # if [[ -z ${var_origDir} ]]; then
            #     var_origDir=$(git config --get remote.origin.url)
            #     if [ ! -d $var_origDir ]; then
            #         echo "Dir '${var_origDir}' not existed, maybe we're not git-dir. Exit!"
            #         return 1
            #     fi
            # fi
            #
            # srcfile="${var_origDir}/$tagfile"
            # if [ ! -f ${srcfile} ]; then
            #     echo "File '${srcfile}' not existed, skip and continue!"
            #     continue
            # elif [[ "$tagfile" == "$ClangdFile" ]]; then
            #     ClangdCompileFile
            # else
            #     echo "Softlink '${srcfile}' -> '$tagfile'"
            #     rm -f $tagfile 2> /dev/null
            #     ln -s ${srcfile} $tagfile
            # fi
        fi
    done
}

# Copy/Save clangd compile commands
ClangdCompileFile() {
    if [ "$var_Action" != "all" ] && [ "$var_Action" != "link" ] && [ "$var_Action" != "save" ]; then
        return
    fi

    skipClangNote="Skip '$ClangdFile': git-original-dir '${var_origDir}' not existed!"
    if ! chk-var ${var_origDir} ; then
        var_origDir=$(git config --get remote.origin.url)
        if ! chk-var ${var_origDir} || [ ! -d $var_origDir ]; then
        do-echo $skipClangNote
            return
        fi
    fi

    # Get the real path
    origDir2=$(readlink -f ${var_origDir})
    workDir2=$(readlink -f ${var_gitTopDir})
    if [ "$var_Action" == "all" ] || [ "$var_Action" == "link" ]; then
        srcdir="$var_origDir"
        dstdir="$var_gitTopDir"
        srcdir2="$origDir2"
        dstdir2="$workDir2"
        srcfile="${var_origDir}/${ClangdFile}"
        dstfile="${var_gitTopDir}/${ClangdFile}"
    elif [ "$var_Action" == "save" ]; then
        dstdir="$var_origDir"
        srcdir="$var_gitTopDir"
        dstdir2="$origDir2"
        srcdir2="$workDir2"
        dstfile="${var_origDir}/${ClangdFile}"
        srcfile="${var_gitTopDir}/${ClangdFile}"
    fi

    if [[ -f "$srcfile" ]]; then
        cp  $srcfile  $dstfile
        sed -i   "s#${srcdir//\//\\/}#${dstdir//\//\\/}#g"  $dstfile
        sed -i   "s#${srcdir2//\//\\/}#${dstdir2//\//\\/}#g"  $dstfile
        echo "[Done!] Clangd ${ClangdFile}: ${srcdir} -> ${dstdir}"
    else
        _do-echo $skipClangNote
    fi
}


#########################################################


# @return bool: return 0 for true and non-zero for false
PrepareFileList() {
    # Prepare file list
    rm -fr ${var_tmpDir} 2> /dev/null
    rm -f ${FLIST} 2> /dev/null
    mkdir -p ${var_tmpDir}

    # Issue "[: -ge: unary operator expected"
    # https://stackoverflow.com/questions/408975/compare-integer-in-bash-unary-operator-expected
    filecnt_c=0
    filecnt_python=0
    filecnt_rust=0
    filecnt_markdown=0
    if [[ "$var_Action" == "wiki" ]]; then
        if [ -z ${MARKDOWN_TAGS_DIR+x} ]; then
            echo "Please set multiple wiki dirs into var 'MARKDOWN_TAGS_DIR' under '$var_Action' var_Action, Exit!"
            return 1
        else
            var_dstDir="$HOME/.cache"
        fi
    elif [ -f ${FLIST} ]; then
        filecnt_c=1024
    else
        filecnt_c=$(       find . "${FIND_FLAG[@]}" -name '*.c'  | wc -l)
        filecnt_python=$(  find . "${FIND_FLAG[@]}" -name '*.py' | wc -l)
        filecnt_rust=$(    find . "${FIND_FLAG[@]}" -name '*.rs' | wc -l)
        filecnt_markdown=$(find . "${FIND_FLAG[@]}" -name '*.md' | wc -l)

        echo "Files count: c=$filecnt_c, python=$filecnt_python, rust=$filecnt_rust, markdown=$filecnt_markdown!"
    fi

    # Rust
    if [ $filecnt_rust -ge 3 ]; then
        rusty-tags vi --output=".tags"

        #return 0
    elif [ $filecnt_c -ge 3 ]; then
        CTAGS_FLAG="$CTAGS_FLAG $CTAGS_FLAG_c $CTAGS_FLAG_script"

        if [ $filecnt_c -lt 1024 ]; then
            clean_files+=("${FLIST}")
        fi

        case "$var_Scope" in
            "all")
                find -L . -name '*.c' -o -name '*.cc' -o -name '*.h' -o -name '*.cpp' -o -name '*.hpp' > ${var_tmpDir}/cscope.f1
                ;;
            "wad")
                find daemon/wad -name '*.c' -o -name '*.cc' -o -name '*.h' -o -name '*.cpp' -o -name '*.hpp' > ${var_tmpDir}/cscope.f1
                ;;
            *)
                find . -name '*.c' -o -name '*.cc' -o -name '*.h' -o -name '*.cpp' -o -name '*.hpp' > ${var_tmpDir}/cscope.f1
                ;;
        esac

        wad_c=$(grep 'daemon/wad' ${var_tmpDir}/cscope.f1 | wc -l)
        if [ $wad_c -ge 10 ]; then
            cat ${var_tmpDir}/cscope.f1            | \
                grep -v 'ccls-cache/'          | \
                grep -v 'wad/ui/stdin/'        | \
                grep -v 'wad/redirect/socket/' | \
                grep -v 'wad/test/'            | \
                grep -v 'wad/unittest/'        | \
                grep -v 'wad/cache/test/'      | \
                grep -v 'daemon/waagent/'      | \
                grep -v 'linux/'               | \
                grep -v 'linux-.*/'            | \
                grep -v 'compress/'            | \
                grep -v 'cooked/'              | \
                grep -v 'fortitest/'           | \
                grep -v 'linuxatm/'            | \
                grep -v 'sysctl/'              | \
                grep -v 'sysapi/stream_scan/tests/'  | \
                grep -v 'router/'              | \
                grep -v 'fortiweb/'            | \
                grep -v 'fortitest/'           | \
                grep -v 'tests/gtest/'         | \
                grep -v 'tests/'               | \
                grep -v 'tools/'               | \
                grep -v '/_' \
                > ${var_tmpDir}/cscope.f2

        else
            cat ${var_tmpDir}/cscope.f1            | \
                grep -v 'ccls-cache/'          | \
                grep -v '/_' \
                > ${var_tmpDir}/cscope.f2
        fi

        sort ${var_tmpDir}/cscope.f2 > ${var_tmpDir}/cscope.f3
        mv ${var_tmpDir}/cscope.f3 ${FLIST}
    elif [[ "$var_Action" == "wiki" ]]; then
        CTAGS_FLAG="$CTAGS_FLAG $CTAGS_FLAG_md $CTAGS_FLAG_script"
        clean_files+=("${var_tmpDir}/${FLIST}")

        # multiple wiki dir
        for oneDir in $(echo $MARKDOWN_TAGS_DIR | tr ";,\ " "\n"); do
            if [[ $oneDir = file://* ]]; then
                oneDir=${oneDir:7}
                if [ -d $oneDir ]; then
                    absDir=$(realpath "$oneDir")
                    find -L "$absDir" -name '*.md' >> ${var_tmpDir}/cscope.f1
                    continue
                fi
            fi
        done

        cat ${var_tmpDir}/cscope.f1            | \
            grep -v 'ccls-cache/'          | \
            grep -v '/_' \
            > ${var_tmpDir}/cscope.f2

        sort ${var_tmpDir}/cscope.f2 > ${var_tmpDir}/cscope.f3
        mv ${var_tmpDir}/cscope.f3 ${var_tmpDir}/${FLIST}
    elif [ $filecnt_markdown -ge 10 ]; then
        CTAGS_FLAG="$CTAGS_FLAG $CTAGS_FLAG_md $CTAGS_FLAG_script"
        clean_files+=("${FLIST}")

        # current dir auto markdown
        for i in "$list"; do
            echo $i
        done
    else
        FLIST=""
    fi

    return 0
}


GenTag() {
    if [[ -f "${var_dstDir}/.tags" ]]; then
        echo "Tags '.tags' existed, Skip! Enforce by '-f'."
        return
    fi

    rm -f "${var_dstDir}/.tags" 2> /dev/null
    rm -f "${var_dstDir}/.tagx" 2> /dev/null
    rm -f "${var_dstDir}/GTAGS" 2> /dev/null
    rm -f "${var_dstDir}/GPATH" 2> /dev/null
    rm -f "${var_dstDir}/GRTAGS" 2> /dev/null
    rm -f "${var_dstDir}/tags" 2> /dev/null
    rm -f "${var_dstDir}/tagx" 2> /dev/null
    rm -f "${var_dstDir}/tags.lock" 2> /dev/null
    rm -f "${var_dstDir}/tags.temp" 2> /dev/null

    #    /usr/bin/time gtags -f ${FLIST}
    #    /usr/bin/time global -u -L ${FLIST}
    rm -f "${var_dstDir}/.tags" 2> /dev/null
    rm -f "${var_dstDir}/.tagx" 2> /dev/null


    fList=${FLIST}
    if [ ! -z ${fList} ] && [ ! -f ${fList} ]; then
        fList=''
        if [ -f "${var_tmpDir}/${FLIST}" ]; then
            fList="${var_tmpDir}/${FLIST}"
        fi
    fi

    #echo "Creating tag: ${var_dstDir}/.tagx"
    if [[ -z ${fList} ]]; then
        # tage-emacs, tags-vim, tagx-fuzzy
        #LC_COLLATE=C $CTAGS -e ${CTAGS_FLAG} -f .tage -R . > /dev/null 2>&1
        LC_COLLATE=C $CTAGS ${CTAGS_FLAG} -f "${var_dstDir}/.tags"  --exclude=.git --exclude=node_modules --exclude=.ccls-cache -R . > /dev/null 2>&1
        LC_COLLATE=C $CTAGS --exclude=.git --exclude=node_modules --exclude=.ccls-cache -xR . > "${var_dstDir}/.tagx" 2>/dev/null
    else
        if [[ "$var_Action" == "wiki" ]]; then
            #cat "${var_dstDir}/.tags" | sort -t$'\t' -k 2 > "${var_dstDir}/.tagx"
            grep -n '^#' $( cat $fList ) > "${var_dstDir}/.tagx"
        else
            # tage-emacs, tags-vim, tagx-fuzzy
            #LC_COLLATE=C $CTAGS -e ${CTAGS_FLAG} -L ${FLIST} -f .tage > /dev/null 2>&1
            LC_COLLATE=C $CTAGS ${CTAGS_FLAG} -L ${fList} -f "${var_dstDir}/.tags" > /dev/null 2>&1
            LC_COLLATE=C $CTAGS -xL ${fList} > "${var_dstDir}/.tagx" 2>/dev/null
        fi
    fi

    echo "Tags done!"
}


GenScope () {
    if [[ -f "${var_dstDir}/cscope.out" ]]; then
        echo "Cscope 'cscope.out' existed, Skip! Enforce by '-f'."
        return
    fi

    rm -f cscope.* 2> /dev/null

    if [[ -z ${FLIST} ]]; then
        cscope -bcqR > /dev/null 2>&1
    else
        cscope -kbq -i ${FLIST} > /dev/null 2>&1
    fi

    echo "Cscope done!"
}

GenCcls () {
    rm -fr .ccls-cache 2> /dev/null
    ccls --index=. --init='{"clang":{"extraArgs": ["-fms-extensions", "-Wno-microsoft-anon-tag", "-Wno-microsoft", "-Wno-gnu-anonymous-struct"]}}' > /dev/null 2>&1
}


ClangdNormalPath () {
    if [[ -f compile_commands.json ]]; then
        sample_dir=$(awk 'match($0, /-I(.*)\/daemon\/wad\//, arr) {print arr[1]; exit}' compile_commands.json)
        cur_dir=$(realpath .)
        if [[ $sample_dir != $cur_dir ]]; then
            echo "${var_FmtIndent}Substitude: $sample_dir -> $cur_dir"
            sed -i "s;$sample_dir;$cur_dir;g" compile_commands.json
        fi
    else
        echo "${var_FmtIndent}Clangd file compile_commands.json not exist, return!"
    fi
}

GenClangdJson () {
    if [[ -f "${var_dstDir}/${ClangdFile}" ]]; then
        echo "Clangd '${ClangdFile}' existed, Skip! Enforce by '-f'."
        return
    fi

    var_FmtIndent=""
    SyncClangdJson
    var_FmtIndent="    "
    ClangdNormalPath
    echo "${var_FmtIndent}clangd done! $(ls -lh $ClangdFile | cut -d ' ' -f 5- )"
}

int () {
    printf '%d' $(expr ${1:-} : '[^0-9]*\([0-9]*\)' 2>/dev/null) || :
}

SyncClangdJson() {
    echo "Handling '$ClangdFile' ..."

    var_FmtIndent="    "
    urlInfo=$(git-info | grep "url = ")
    if echo "$urlInfo" | grep -q -ie "fpx\|fortiproxy" ; then
        guessPlat="fortiproxy"
    elif echo $urlInfo | grep -q -ie "fos\|fortios\|fgt\|ftg\|fortigate" ; then
        guessPlat="fortigate"
    else
        echo "${var_FmtIndent}Can't get plat info, clangd do nothing, Return!"
        return 1
    fi

    verNum1=$(cat .version | grep "CONFIG_MAJOR_NUM"    | cut -c 18- )
    verNum2=$(cat .version | grep "CONFIG_MINOR_NUM"    | cut -c 18- )
    verNum3=$(cat .version | grep "CONFIG_PATCH_NUM"    | cut -c 18- )
    buildNum=$(cat .version| grep "CONFIG_BRANCH_POINT" | cut -c 21- )

    if [[ $var_Action == "push" ]]; then
        if [[ -f $ClangdFile ]]; then
            echo "${var_FmtIndent}Push '$ClangdFile' to server /clangd/$guessPlat/${verNum1}${verNum2}${verNum3}B${buildNum}"
            tar czf "$ClangdFile.tgz" $ClangdFile
            eval "${LFTP_ATCMD}'mkdir -fp /clangd/$guessPlat/${verNum1}${verNum2}${verNum3}B${buildNum}; \
                cd /clangd/$guessPlat/${verNum1}${verNum2}${verNum3}B${buildNum}/; \
                mput ${ClangdFile}.tgz'"
        else
            echo "${var_FmtIndent}Can't push non-exist file '$ClangdFile'"
            return 1
        fi
    elif [[ -f $ClangdFile ]]; then
        echo "${var_FmtIndent}The '$ClangdFile' exist, do nothing!"
    else
        echo "${var_FmtIndent}Pull '$ClangdFile' from server"
        eval "$LFTP_ATCMD'ls /clangd/$guessPlat/${verNum1}*B*' > /tmp/tag.log"
        if [[ $? == 0 ]]; then
            upBuild=$(upper.awk -v t=$buildNum /tmp/tag.log)
            eval "${LFTP_ATCMD}'mget /clangd/$guessPlat/${verNum1}*B*${upBuild}/${ClangdFile}.tgz;'"
            tar xzf "$ClangdFile.tgz"
            rm "$ClangdFile.tgz"
            grep "${upBuild}$" /tmp/tag.log | cut -d ' ' -f 8- | sed "s#^#${var_FmtIndent}#"
        fi
    fi
}


maketemp () {
    TEMPFILE=
    if [ -z "$TEMPFILE" ]; then
        TEMPFILE="$(mktemp /tmp/git-info.XXXXXX)" || die
    fi

    if [ -z "$TEMPFILE2" ]; then
        TEMPFILE2="$(mktemp /tmp/git-info.XXXXXX)" || die
    fi
}

cleanup() {
    trap - EXIT

    duration=$SECONDS
    echo "trap-cleanup(var_Action=$var_Action time=$(($duration / 60))m:$(($duration % 60))s)"

    for cleanfile in "${clean_files[@]}" ;  do
        rm -fr "${cleanfile}" 2> /dev/null
    done

    if [ -n "$TEMPFILE" ]; then
        rm -f "$TEMPFILE" 2> /dev/null
    fi

    if [ -n "$TEMPFILE2" ]; then
        rm -f "$TEMPFILE2" 2> /dev/null
    fi

    # Backto the original current dir
    cd "$var_WorkDir"
}


trap "cleanup; exit 130" 1 2 3 15
if command -v getoptions &>/dev/null; then
    eval "$(getoptions parse_define) exit 1"
else
    echo "Please install getoptions:"
    echo "  wget -O $HOME/bin/getoptions https://github.com/ko1nksm/getoptions/releases/latest/download/getoptions"
    exit 1
fi

main "$@"

