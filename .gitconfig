[user]
	name = Huawen Yu
	email = hyu@fortinet.com
[core]
	excludesfile = ~/.gitignore_global
	editor = vim
#[format]
#	pretty = format:%h %ad %s(%an)
[log]
	date = short
[github]
	user = huawenyu
[alias]
	log0  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold yellow)(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short
	log1  = log --color --no-walk --tags --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold yellow)(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short

	log00  = log --first-parent --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold yellow)(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short
	log4  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --shortstat
	log5  = log --graph --abbrev-commit --decorate --date=short --format=format:'%C(bold blue)%h%C(reset) %ad %C(white)%s%C(reset) %C(dim white)%C(cyan)(%an)%C(reset)%C(reset)%C(bold yellow)%d%C(reset)' --all
	log6  = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	log7  = log --format=format:"%H" --shortstat
	# But too slow: git-foresta --all --style=10 | less -RSX
	#   Foresta: https://github.com/takaaki-kasai/git-foresta
	#       Install: curl -L https://github.com/takaaki-kasai/git-foresta/raw/master/git-foresta -o ~/bin/git-foresta && chmod +x ~/bin/git-foresta
	message = show -s --format=%B
	#tree  = foresta --all --style=10
	tree  = log --graph --decorate --oneline --all

	tree2 = log --graph --decorate --pretty=oneline --abbrev-commit
	tree3 = "forest --pretty=format:'%C(red)%h %C(magenta)(%ar) %C(blue)%an %C(reset)%s' --style=15 --reverse"
	tree4 = "forest --pretty=format:'%C(bold blue)%h%C(reset) %ad %C(white)%s%C(reset) %C(dim white)%C(cyan)(%an)%C(reset)%C(reset)%C(bold yellow)%d%C(reset)' --style=15 --reverse"
	#d = difftool
	#dt = "!f() { vim -p $(git diff --name-only) +\"tabdo Gvdiff $@\" +tabfirst; }; f"
	#vimdiff = "!f() { vim -p $(git diff --name-only) +\"tabdo Gvdiff $@\" +tabfirst; }; f"

	#parent = "!git show-branch 2>&1 | grep '*' | grep -v 'warning: ' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"
	parent = "!git show-branch 2>/dev/null | grep '!' | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | tail -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[\\^~].*//' #"

    # list aliases
    la = "!git config -l | grep alias | cut -c 7-"

	# https://stackoverflow.com/questions/3321492/git-alias-with-positional-parameters
	ls  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold yellow)(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short

	# https://jay.gooby.org/2021/07/13/positional-arguments-in-git-aliases
	#  List commit related to specific bug: mantis="111810" git mantis dfb7a91cfd..HEAD
	#  List all mantis from commits: git mantis dfb7a91cfd..HEAD
	mantis = "!f() { \
        git log $@ | awk ' \
            BEGIN { \
                if (\"mantis\" in ENVIRON) { \
                    vMantis=ENVIRON[\"mantis\"]; \
                } else { \
                    vMantis=\"#\"; \
                }; \
            } \
            /^\\s*$/ {next} \
            /^commit/ { \
                one=0; \
                commit=substr($2, 1, 10); \
                next;\
            } \
            /^Author: / { \
                one=1; \
                author=$2\" \"$3; \
                next; \
            } \
            /^Date: / {date=$2; next} \
            /[[:alpha:]]+-[0-9]+: / {summary=$0; next} \
            /^    Mantis: / { \
                mantis=$2; one=0; \
                if (index($0, vMantis) > 0) { \
                    printf(\"%s %s %-15.15s %s  %s\\n\", date, commit, author, mantis, summary); \
                } \
            } '; \
        }; f"

	# Only list cli-changed commits: include config/diag cli changes
	cli0 = "!f() { \
        git log $@ | awk ' \
        BEGIN { \
            state=0;cli1;cli2; \
        } \
        /^\\s*$/{next} \
        /^commit / { \
            if (state==0 || state==1) { \
                state=1; \
                commit=substr($2, 1, 10); \
                next; \
            } else if (state==2) { \
                printf(\"%s %s %-15.15s %s  %s  %s === %s; %s\\n\", date, commit, author, eco, mantis, summary,cli1,cli2); \
                state=0; \
                commit=substr($2, 1, 10); \
                next; \
            } \
        } \
        state==1 && /^Author: /     {author=$2\" \"$3; next} \
        state==1 && /^Date: /       {date=$2; next} \
        state==1 && /[[:alpha:]]+-[0-9]+: /{summary=$0; next} \
        state==1 && /diag/          {state=2;cli1=$0;next} \
        /diagnose/  {state=2;next}  \
        /dia /      {state=2;cli1=$0;next} \
        /exe /      {state=2;cli2=$0;next} \
        /exec/      {state=2;cli2=$0;next} \
        /^    CLI Changes:/{ state=2; next} \
        /^    Mantis: /{mantis=$2}  \
        /^    Root Cause ECO Number:/ {eco=substr($4,8,6);} '; \
        }; f"

	# Only list cli-changed commits: include config/diag cli changes
	cli = "!f() { \
        git log $@ | awk ' \
            BEGIN { \
                state=0; \
                cli1;cli2; \
                delete lines; \
            } \
            { \
                lines[NR] = $0; \
            } \
            /^\\s*$/{next} \
            /^commit / { \
                if (state==0 || state==1) { \
                    state=1; commit=substr($2, 1, 10); \
                    delete lines; \
                    next; \
                } else if (state==2) { \
                    printf(\"%s %s %-15.15s %s  %s  %s === %s; %s\\n\", date, commit, author, eco, mantis,summary,cli1,cli2); \
                    for (line in lines) { \
                        print lines[line]; \
                    }; \
                    state=0; \
                    delete lines; \
                    commit=substr($2, 1, 10); \
                    next; \
                } \
            } \
            state==1 && /^Author: /             {author=$2\" \"$3; next} \
            state==1 && /^Date: /               {date=$2; next} \
            state==1 && /[[:alpha:]]+-[0-9]+: / {summary=$0; next} \
            state==1 && /diag/                  {state=2;cli1=$0;next} \
            /diagnose/                          {state=2;next}  \
            /dia /      {state=2;cli1=$0;next} \
            /exe /      {state=2;cli2=$0;next} \
            /exec/      {state=2;cli2=$0;next} \
            /^    CLI Changes:/{ state=2; next} \
            /^    Mantis: /{mantis=$2}  \
            /^    Root Cause ECO Number:/{eco=substr($4,8,6);} '; \
        }; f"

	# Only list New feature commits
	feature = "!f() { \
        git log $@ | awk ' \
            BEGIN{} \
            /^\\s*$/{next} \
            /^commit /              {state=1; commit=substr($2, 1, 10); next;} \
            state==1 && /^Author: / {author=$2\" \"$3; next} \
            state==1 && /^Date: /   {date=$2; next} \
            state==1 && /[[:alpha:]]+-[0-9]+: /{summary=$0; next} \
            state==1 && /^    Purpose: To merge a new feature or enhancement/{ state=2; next} \
            /^    Mantis: /{ \
                mantis=$2; \
                if (state==2) { \
                    printf(\"%s %s %-15.15s %s\\n\", date, commit, author, summary); \
                } \
                state=0; \
            } '; \
        }; f"

	# Only list root-cause-eco
	eco = "!f() { \
        git log $@ | awk ' \
            BEGIN{} \
            /^\\s*$/ {next} \
            /^commit /              {state=1; commit=substr($2, 1, 10); next;} \
            state==1 && /^Author: / {author=$2\" \"$3; next} \
            state==1 && /^Date: /   {date=$2; next} \
            state==1 && /[[:alpha:]]+-[0-9]+: / { summary=$0; next} \
            state==1 && /^    Purpose: To fix a bug in this major release/ { state=2; next} \
            state==2 && /^    Mantis: /{mantis=$2}  \
            state==2 && /^    Root Cause ECO Number:/ { \
                eco=substr($4,8,6); \
                if (state==2) { \
                    printf(\"cause-eco %s  %s %-15.15s %s  %s\\n\", eco, date, commit, author, mantis, summary); \
                }; \
                state=0; \
            }'; \
        }; f"

    # Not works well: because the root-cause-eco sometimes point to FOS-main, not belong to FPX branch.
	# Continue list the time of root-cause-eco, assume the pre-load-file 'log.eco' create by 'git eco'
	eco2 = "!f() { \
        git log $@ | awk ' \
            BEGIN {  \
                while ((getline < \"log.eco\") > 0) { \
                    old=ECOs[$2]; \
                    ECOs[$2] = old \"; \" $0; \
                } \
                close(\"log.eco\"); \
                \
                if (length(ECOs) == 0) { \
                    print \"Error: file log.eco not exist, run git eco redirect to log.eco firstly!\"; \
                    exit 1; \
                }; \
            } \
            /^\\s*$/ {next} \
            /^commit / {state=1; commit=substr($2, 1, 10); next;} \
            state==1 && /^Author: / {author=$2\" \"$3; next} \
            state==1 && /^Date: /{date=$2; next} \
            state==1 && /^    [[:alpha:]]+-[0-9]+: / { \
                if (match($0, /([[:alpha:]]+)-([0-9]+): (.*)/, ecoSummary)) { \
                    ecome=ecoSummary[2]; \
                    if (ecome in ECOs) { \
                        state = 2; \
                        print \"Remove a dummy resolved: \" ECOs[ecome]; \
                    } \
                    next; \
                } \
            } \
            state==2 && /^    Mantis: /{mantis=$2} \
            state==2 && /^    Root Cause ECO Number:/ { \
                eco=substr($4,8,6); \
                if (state==2) { \
                    printf(\"cause-eco %s  %s %-15.15s %s  %s\\n\", eco, date, commit, author, mantis, summary) \
                } \
                state=0; \
            }'; \
        }; f"

	# Git subtree if just use third-part repo, but no push request
	#   git st-add <remote-repo> [<branch-name>]
	st-add = "!f() { \
		DEFAULT_BRANCH=master; \
		DEFAULT_DIR=$(basename $1 | cut -d. -f1); \
		git subtree add --prefix $DEFAULT_DIR $1 ${2:-$DEFAULT_BRANCH} --squash; \
		}; f"
	st-pull = "!f() { \
		DEFAULT_BRANCH=master; \
		DEFAULT_DIR=$(basename $1 | cut -d. -f1); \
		git subtree pull --prefix $DEFAULT_DIR $1 ${2:-$DEFAULT_BRANCH} --squash; \
		}; f"
	st-push = "!f() { \
		DEFAULT_BRANCH=master; \
		DEFAULT_DIR=$(basename $1 | cut -d. -f1); \
		git subtree push --prefix $DEFAULT_DIR $1 ${2:-$DEFAULT_BRANCH}; \
		}; f"
	vimdiff = "!f() { vim -p $(git diff --name-only) +\"tabdo Gvdiff $@\" +tabfirst; }; f"

	stat2 = status --untracked-files=all .

[credential]
	helper = store
[pack]
	windowMemory = 100m
	SizeLimit = 100m
	threads = 1
	window = 0
[http]
	sslVerify = true
[gitreview]
	remote = origin
	username = Yu,Huawen(Wilson)
[commit]
	template = ~/.gitmessage
[pull]
	ff = only
[init]
	defaultBranch = local
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[safe]
	directory = /ssd/proj/linux
